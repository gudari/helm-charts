{{- if .Values.hdfs.dataNode.enabled }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "hadoop.fullname" . }}-hdfs-datanode
  annotations:
    checksum/config: {{ include (print $.Template.BasePath "/hadoop-configmap.yaml") . | sha256sum }}
{{- with .Values.hdfs.dataNode.annotations }}
{{ toYaml . | indent 4 }}
{{- end }}
  labels:
    app: {{ include "hadoop.name" . }}
    chart: {{ include "hadoop.chart" . }}
    release: {{ .Release.Name }}
    component: hdfs-datanode
spec:
  serviceName: {{ include "hadoop.fullname" . }}-hdfs-datanode
  replicas: {{ .Values.hdfs.dataNode.replicas }}
  selector:
    matchLabels:
      app: {{ include "hadoop.name" . }}
      release: {{ .Release.Name }}
      component: hdfs-datanode
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/hadoop-configmap.yaml") . | sha256sum }}
{{- with .Values.hdfs.dataNode.annotations }}
{{ toYaml . | indent 8 }}
{{- end }}
      labels:
        app: {{ include "hadoop.name" . }}
        release: {{ .Release.Name }}
        component: hdfs-datanode
    spec:
    {{- with .Values.hdfs.dataNode.nodeSelector }}
      nodeSelector:
      {{ toYaml . | indent 8 }}
    {{- end }}
      affinity:
    {{- if .Values.hdfs.dataNode.affinity }}
{{ toYaml .Values.hdfs.dataNode.affinity | indent 8 }}
    {{- end }}
        {{- if eq .Values.hdfs.dataNode.antiAffinity "hard" }}
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - topologyKey: "kubernetes.io/hostname"
            labelSelector:
              matchLabels:
                app:  {{ include "hadoop.name" . }}
                release: {{ .Release.Name | quote }}
                component: hdfs-datanode
        {{- else if eq .Values.hdfs.dataNode.antiAffinity "soft" }}
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 5
            podAffinityTerm:
              topologyKey: "kubernetes.io/hostname"
              labelSelector:
                matchLabels:
                  app:  {{ include "hadoop.name" . }}
                  release: {{ .Release.Name | quote }}
                  component: hdfs-datanode
        {{- end }}
{{- if .Values.hdfs.dataNode.securityContext }}
      securityContext:
{{ toYaml .Values.hdfs.dataNode.securityContext | indent 8 }}
{{- end }}
      terminationGracePeriodSeconds: 0
      containers:
      - name: hdfs-datanode
        image: "{{ .Values.hdfs.dataNode.image.repository }}:{{ .Values.hdfs.dataNode.image.tag }}"
        imagePullPolicy: {{ .Values.hdfs.dataNode.image.pullPolicy | quote }}
        resources:
{{ toYaml .Values.hdfs.dataNode.resources | indent 10 }}
        ports:
{{- range $key, $port := .Values.hdfs.dataNode.ports }}
        - name: {{ $key }}
{{ toYaml $port | indent 10 }}
{{- end }}
        readinessProbe:
          httpGet:
            path: /
            port: {{ .Values.hdfs.dataNode.ports.http.containerPort }}
          initialDelaySeconds: 60
          timeoutSeconds: 2
        livenessProbe:
          httpGet:
            path: /
            port: {{ .Values.hdfs.dataNode.ports.http.containerPort }}
          initialDelaySeconds: 60
          timeoutSeconds: 2
        env:
        - name: SERVICE_PRECONDITION
          value: "{{ include "hadoop.fullname" . }}-hdfs-namenode-0.{{ include "hadoop.fullname" . }}-hdfs-namenode.{{ .Release.Namespace }}.svc.cluster.local:50070"
        envFrom:
        - configMapRef:
            name: {{ include "hadoop.fullname" . }}-configmap
{{- if .Values.hdfs.dataNode.persistence.enabled }}
        volumeMounts:
        - name: dfs
          mountPath: /hadoop/dfs/data
  volumeClaimTemplates:
  - metadata:
      name: dfs
    spec:
      accessModes:
        - {{ .Values.hdfs.dataNode.persistence.accessMode | quote }}
      resources:
        requests:
          storage: {{ .Values.hdfs.dataNode.persistence.size | quote }}
    {{- if .Values.hdfs.dataNode.persistence.storageClass }}
    {{- if (eq "-" .Values.hdfs.dataNode.persistence.storageClass) }}
      storageClassName: ""
    {{- else }}
      storageClassName: "{{ .Values.hdfs.dataNode.persistence.storageClass }}"
    {{- end }}
    {{- end }}
      {{- else }}
      volumes:
        - name: dfs
          emptyDir: {}
      {{- end }}
{{- end }}
